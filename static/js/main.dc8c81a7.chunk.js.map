{"version":3,"sources":["Components/Logos.js","App.js","serviceWorker.js","index.js"],"names":["EvolveLogo","logoFill","stripeFill","useGradientForLogo","useGradientForLogoStripe","logoGradientColorA","logoGradientColorB","logoStripeGradientColorA","logoStripeGradientColorB","xmlns","width","height","id","x1","y1","x2","y2","offset","style","stopColor","r","g","b","stopOpacity","fill-rule","clip-rule","fill","d","App","useState","name","setName","fontSize","setFontSize","logoFilterColor","setLogoFilterColor","a","setLogoGradientColorA","setLogoGradientColorB","setLogoStripeGradientColorA","setLogoStripeGradientColorB","logoStripeColor","setLogoStripeColor","textColor","setTextColor","borderColor","setBorderColor","setUseGradientForLogo","setUseGradientForLogoStripe","dynamicStyles","makeStyles","theme","resultWrapper","flexGrow","border","backgroundImage","process","backgroundRepeat","backgroundSize","logoWrapper","margin","borderRadius","logo","position","logoItems","textWrapper","color","fontFamily","Fragment","Container","maxWidth","Grid","container","direction","spacing","justify","alignItems","item","className","Typography","Button","variant","onClick","html2canvas","document","querySelector","then","canvas","body","appendChild","TextField","label","value","onChange","event","target","type","InputLabelProps","shrink","FormControlLabel","control","Checkbox","checked","onChangeComplete","rgb","hex","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc8c81a7.chunk.js","sourcesContent":["\nimport React from 'react';\n\nexport const EvolveLogo = ({ logoFill, stripeFill, useGradientForLogo, useGradientForLogoStripe, logoGradientColorA, logoGradientColorB, logoStripeGradientColorA, logoStripeGradientColorB }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"333.84\" height=\"258.96\">\n        <defs>\n            <linearGradient id=\"logoGradient\" x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\" >\n            <stop offset=\"0%\" style={{stopColor: `rgb(${logoGradientColorA.r}, ${logoGradientColorA.g}, ${logoGradientColorA.b})`, stopOpacity: '1'}} />\n            <stop offset=\"100%\" style={{stopColor: `rgb(${logoGradientColorB.r}, ${logoGradientColorB.g}, ${logoGradientColorB.b})`, stopOpacity: '1'}} />\n            </linearGradient>\n            <linearGradient id=\"logoStripeGradient\" x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\" >\n            <stop offset=\"0%\" style={{stopColor: `rgb(${logoStripeGradientColorA.r}, ${logoStripeGradientColorA.g}, ${logoStripeGradientColorA.b})`, stopOpacity: '1'}} />\n            <stop offset=\"100%\" style={{stopColor: `rgb(${logoStripeGradientColorB.r}, ${logoStripeGradientColorB.g}, ${logoStripeGradientColorB.b})`, stopOpacity: '1'}} />\n            </linearGradient>\n        </defs>\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill={useGradientForLogo ? 'url(#logoGradient)': logoFill} d=\"M121.2 0c1.426 1.208 5.785 13.844 7.44 16.56 7.094 11.642 17.701 20.691 32.4 24.72 12.36 3.388 27.14.679 39.12-1.2 16.164-2.535 40.993 6.162 47.04 13.68V54l-62.64 32.16-51.12 23.76c-20.572 8.972-41.482 16.832-62.88 25.2 2.813-11.921 18.389-22.744 25.2-31.44-23.375-3.529-39.715 11.846-42.96 30.24l-.48-.24c-.836-7.516-2.729-16.833-1.2-25.44 5.247-29.519 24.988-47.529 56.16-50.64-4.015-21.241-2.977-35.751 7.44-50.4L121.2 0zM260.4 65.76h-.96l-10.8 6.72-30 18-17.28 9.36h-.48c5.172 5.945 12.269 9.335 13.92 18.96l46.08-24 11.76-6.48c1.22-6.56-9.887-17.481-12.24-22.56zm0 27.36v.48c-8.881-1.973-13.943-10.294-9.84-20.64 5.712 2.498 14.969 10.63 9.84 20.16zM275.76 102.72c3.659 4.162-4.919 17.673-6.24 19.44-7.975 10.671-20.086 16.899-35.28 20.4-5.264 1.213-15.092 2.337-19.92-.24l1.2-2.88 11.04-6.24c10.258-6.09 20.339-12.029 30.24-18.24l18.96-12.24zM147.36 125.28h.72c-1.976 8.791-2 17.42-3.12 27.36-11.811 3.601-24.535 13.232-36.72 15.6v-1.2l.48-5.76c-4.696 2.225-8.873 4.848-12.72 7.92l-6.24 6.72-23.52 8.4-.24-.72c-4.309-7.302-2.854-20.482-2.16-30L84 148.08c13.663-4.23 26.733-8.237 39.36-13.2 7.162-2.815 18.204-5.318 24-9.6zM148.32 172.56l4.08 9.12c2.555 5.001 8.542 10.831 10.08 15.6l-32.88 14.64c-3.387 1.47-9.302 5.621-12.96 5.28-3.029-9.69-6.633-16.598-8.4-29.04 9.643-2.31 19.048-6.932 27.84-10.56l12.24-5.04zM82.56 196.32h.96c.946 13.094 7.07 20.438 12 29.28-6.53-2.958-19.107-19.371-22.56-26.16l9.6-3.12zM270.24 210h.48c-2.386 4.927-9.337 9.074-13.68 12.24-13.354 9.736-37.034 23.062-62.88 18-15.556-3.046-26.136-8.549-37.68-14.88l.24-.48 24.72-11.28c17.967 14.36 56.248 14.938 78 3.84 4.02-2.051 8.217-3.976 10.8-7.44zM143.76 230.4l2.88 10.56c2.895 6.947 9.335 14.991 16.56 17.52v.48h-.24c-9.081-3.985-16.927-8.708-24.24-14.4l-8.64-8.16.24-.48 13.44-5.52z\"/>\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\"  fill={useGradientForLogoStripe ? 'url(#logoStripeGradient)': stripeFill} d=\"M333.36 4.8h.48c-4.186 5.204-11.617 8.983-17.04 12.96-13.511 9.908-27.136 19.626-41.28 29.04-54.721 36.42-112.929 66.547-181.2 90-21.228 7.292-43.365 11.471-67.68 16.32-4.13.824-22.602 3.975-26.64 2.4 12.233-1.481 24.56-5.643 35.52-9.12 24.506-7.774 46.93-15.145 69.36-24.72 15.469-6.604 30.448-12.794 45.6-19.44l36.24-17.52 25.92-12.96c11.326-6.64 23.667-11.397 34.56-18.24l18.48-9.6 43.68-24.96 24-14.16zM333.6 52.8c-.55 2.354-13.348 10.599-16.32 12.72-14.792 10.556-29.239 21.599-44.88 31.44-16.247 10.223-32.642 20.804-49.44 30.72-43.288 25.552-90.547 45.371-143.28 61.44-17.97 5.476-36.609 8.591-57.12 12.24-4.021.715-17.643 3.277-21.6 1.68h.48l24.96-6c17.381-5.257 34.61-10.037 50.64-16.32 30.742-12.05 60.8-25.461 90.24-38.4l47.52-23.76c9.78-3.886 20.45-9.901 29.76-15.36 9.372-5.495 19.537-9.619 28.32-15.6l12.48-6.48 34.08-19.92 14.16-8.4zM333.36 105.6l.48.24-22.56 16.8c-14.25 10.17-28.381 20.518-43.44 30-52.551 33.092-105.202 61.556-169.68 83.52-21.813 7.43-44.457 12.234-69.6 17.04-4.411.843-23.117 4.15-27.6 2.4 9.075-.652 18.567-4.021 26.64-6.48 21.889-6.669 42.597-13.094 62.64-21.12 24.882-9.964 48.78-20.665 72.24-31.2 13.588-6.102 28.718-12.513 41.76-20.16 14.316-8.395 29.82-14.532 43.92-22.8 19.888-11.662 40.469-21.73 60-33.36l25.2-14.88z\"/>\n    </svg>\n);\n","import React, { useState } from 'react';\nimport html2canvas from 'html2canvas'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Button, Typography, TextField, Container, Checkbox, FormControlLabel } from '@material-ui/core';\nimport { SketchPicker } from 'react-color';\nimport { EvolveLogo } from './Components/Logos';\n\nfunction App() {\n  const [name, setName] = useState(\"bay\");\n  const [fontSize, setFontSize] = useState(60);\n  const [logoFilterColor, setLogoFilterColor] = useState(\"#FFFFF\");\n  const [logoGradientColorA, setLogoGradientColorA] = useState({a: 1, b: 255, g: 0, r: 255});\n  const [logoGradientColorB, setLogoGradientColorB] = useState({a: 1, b: 255, g: 255, r: 0});\n  const [logoStripeGradientColorA, setLogoStripeGradientColorA] = useState({a: 1, b: 255, g: 0, r: 255});\n  const [logoStripeGradientColorB, setLogoStripeGradientColorB] = useState({a: 1, b: 255, g: 255, r: 0});\n  const [logoStripeColor, setLogoStripeColor] = useState(\"#FFFFF\");\n  const [textColor, setTextColor] = useState({a: 1, b: 255, g: 255, r: 255});\n  const [borderColor, setBorderColor] = useState({a: 1, b: 255, g: 255, r: 255});\n  const [useGradientForLogo, setUseGradientForLogo] = useState(false);\n  const [useGradientForLogoStripe, setUseGradientForLogoStripe] = useState(false);\n\n  const dynamicStyles = makeStyles(theme => ({\n    resultWrapper: {\n      flexGrow: 1,\n      border: '1px solid black',\n      width: '512px',\n      height: '512px',\n      backgroundImage: `url(${process.env.PUBLIC_URL}/assets/backgrounds/1.png)`,\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'contain'\n    },\n    logoWrapper: {\n      backgroundSize: 'contain',\n      margin: '0 auto',\n      width: '500px',\n      height: '500px',\n      border: `7px solid rgba(${borderColor.r}, ${borderColor.g}, ${borderColor.b}, ${borderColor.a})`,\n      borderRadius: '100%',\n    },\n    logo: {\n      margin: '0 auto',\n      width: '333px',\n      height: '258px',\n      position: 'relative'\n    },\n    logoItems: {\n      position: 'relative'\n    },\n    textWrapper: {\n      color: `rgba(${textColor.r}, ${textColor.g}, ${textColor.b}, ${textColor.a})`,\n      fontSize: `${fontSize}px`,\n      fontFamily: 'SFProDisplay-BlackItalic'\n    }\n  }))()\n\n  const handleNameChange = event => setName(event.target.value);\n  const handleFontSizeChange = event => setFontSize(event.target.value);\n  const handleLogoFilterColorChange = (color) => setLogoFilterColor(color.hex);\n  const handleLogoGradientAColorChange = (color) => setLogoGradientColorA(color.rgb);\n  const handleLogoGradientBColorChange = (color) => setLogoGradientColorB(color.rgb);\n  const handleLogoStripeColorChange = (color) => setLogoStripeColor(color.hex);\n  const handleTextColorChange = (color) => setTextColor(color.rgb);\n  const handleBorderColorChange = (color) => setBorderColor(color.rgb);\n  const handleChangeUseGradientForLogo = event => setUseGradientForLogo(event.target.checked);\n  const handleChangeUseGradientForLogoStripe = event => setUseGradientForLogoStripe(event.target.checked);\n  const handleLogoStripeGradientAColorChange = (color) => setLogoStripeGradientColorA(color.rgb);\n  const handleLogoStripeGradientBColorChange = (color) => setLogoStripeGradientColorB(color.rgb);\n  const handleSave = () => {\n    html2canvas(document.querySelector(\"#resultImg\")).then(canvas => {\n      document.body.appendChild(canvas);\n    });\n  }\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"xl\">\n        <Grid container direction=\"column\" spacing={2} justify=\"center\" alignItems=\"center\">\n          <Grid item>\n            <Grid id=\"resultImg\" container className={dynamicStyles.resultWrapper}>\n              <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" item className={dynamicStyles.logoWrapper}>\n                  <Grid item className={dynamicStyles.logo}>\n                    <EvolveLogo \n                      className={dynamicStyles.logoItems}\n                      useGradientForLogo={useGradientForLogo}\n                      useGradientForLogoStripe={useGradientForLogoStripe}\n                      logoGradientColorA={logoGradientColorA}\n                      logoGradientColorB={logoGradientColorB}\n                      logoStripeGradientColorA={logoStripeGradientColorA}\n                      logoStripeGradientColorB={logoStripeGradientColorB}\n                      logoFill={logoFilterColor}\n                      stripeFill={logoStripeColor}\n                    />\n                  </Grid>\n                  <Grid item><Typography className={dynamicStyles.textWrapper}>{name}</Typography></Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item id=\"controls\" justify=\"center\" alignItems=\"center\" spacing={2} container direction=\"column\">\n            <Grid item><Button variant=\"outlined\" onClick={handleSave}>Save</Button></Grid>\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n              <Grid item>\n                <TextField id=\"outlined-name\" label=\"Name\" variant=\"outlined\" value={name} onChange={handleNameChange} />\n              </Grid>\n              <Grid item>\n                <TextField\n                  id=\"outlined-name\"\n                  label=\"Font Size\"\n                  variant=\"outlined\"\n                  value={fontSize}\n                  onChange={handleFontSizeChange}\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </Grid>\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={useGradientForLogo}\n                    onChange={handleChangeUseGradientForLogo}\n                    color=\"primary\"\n                  />\n                }\n                label=\"Use Gradient for Logo\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={useGradientForLogoStripe}\n                    onChange={handleChangeUseGradientForLogoStripe}\n                    color=\"primary\"\n                  />\n                }\n                label=\"Use Gradient for Stripe\"\n              />\n            </Grid>\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n              {useGradientForLogo ? (\n                <React.Fragment>\n                  <Grid item>\n                    <Typography>Gradient Color A of Logo</Typography>\n                    <SketchPicker\n                      color={logoGradientColorA}\n                      id=\"logoGradientColorA\"\n                      onChangeComplete={handleLogoGradientAColorChange}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Typography>Gradient Color B of Logo</Typography>\n                    <SketchPicker\n                      color={logoGradientColorB}\n                      id=\"logoGradientColorB\"\n                      onChangeComplete={handleLogoGradientBColorChange}\n                    />\n                  </Grid>\n                </React.Fragment>\n              ) : (\n                <React.Fragment>\n                  <Grid item>\n                    <Typography>Color of Logo</Typography>\n                    <SketchPicker\n                      color={logoFilterColor}\n                      id=\"logoFilterColor\"\n                      onChangeComplete={handleLogoFilterColorChange}\n                    />\n                  </Grid>\n                </React.Fragment>\n              )}\n              {useGradientForLogoStripe ? (\n                <React.Fragment>\n                  <Grid item>\n                    <Typography>Gradient Color A of Stripe</Typography>\n                    <SketchPicker\n                      color={logoStripeGradientColorA}\n                      id=\"logoStripeGradientColorA\"\n                      onChangeComplete={handleLogoStripeGradientAColorChange}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Typography>Gradient Color B of Stripe</Typography>\n                    <SketchPicker\n                      color={logoStripeGradientColorB}\n                      id=\"logoStripeGradientColorB\"\n                      onChangeComplete={handleLogoStripeGradientBColorChange}\n                    />\n                  </Grid>\n                </React.Fragment>\n              ) : (\n                  <React.Fragment>\n                    <Grid item>\n                      <Typography>Color of Logo Stripe</Typography>\n                      <SketchPicker\n                        color={logoStripeColor}\n                        id=\"logoStripeColor\"\n                        onChangeComplete={handleLogoStripeColorChange}\n                      />\n                    </Grid>\n                  </React.Fragment>\n              )}\n              <Grid item>\n                <Typography>Color of Text</Typography>\n                <SketchPicker\n                  color={textColor}\n                  id=\"textColor\"\n                  onChangeComplete={handleTextColorChange}\n                />\n              </Grid>\n              <Grid item>\n                <Typography>Color of Border</Typography>\n                <SketchPicker\n                  color={borderColor}\n                  id=\"borderColor\"\n                  onChangeComplete={handleBorderColorChange}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}