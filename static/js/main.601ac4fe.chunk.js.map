{"version":3,"sources":["serviceWorker.js","Components/Logos.js","Components/Footer.js","Components/Gen.js","Components/Theme.js","index.js"],"names":["Boolean","window","location","hostname","match","EvolveLogo","logoFill","stripeFill","useGradientForLogo","useGradientForLogoStripe","logoGradientColorA","logoGradientColorB","logoStripeGradientColorA","logoStripeGradientColorB","xmlns","width","height","id","x1","y1","x2","y2","offset","style","stopColor","r","g","b","stopOpacity","fillRule","clipRule","fill","d","EvolveBorder","borderColor","useGradientForBorder","logoBorderGradientColorA","logoBorderGradientColorB","useRect","useCircle","preserveAspectRatio","x","y","stroke","strokeWidth","cy","cx","footerStyle","fontSize","color","textAlign","padding","position","left","bottom","Footer","children","Gen","useState","name","setName","setFontSize","logoFilterColor","setLogoFilterColor","a","setLogoGradientColorA","setLogoGradientColorB","setLogoStripeGradientColorA","setLogoStripeGradientColorB","setLogoBorderGradientColorA","setLogoBorderGradientColorB","logoStripeColor","setLogoStripeColor","textColor","setTextColor","setBorderColor","setUseGradientForLogo","setUseGradientForLogoStripe","setUseGradientForBorder","useRectBorder","setUseRectBorder","useCircleBorder","setUseCircleBorder","dynamicStyles","makeStyles","theme","resultWrapper","flexGrow","backgroundImage","process","backgroundRepeat","backgroundSize","logoWrapper","margin","logo","logoBorder","logoItems","textWrapper","fontFamily","saveAs","uri","filename","link","document","createElement","download","href","body","appendChild","click","removeChild","open","Fragment","Container","maxWidth","Grid","container","direction","spacing","justify","alignItems","item","className","Typography","Button","variant","onClick","scrollTo","documentElement","classList","add","html2canvas","querySelector","useCORS","then","canvas","toDataURL","remove","randomColor","format","Math","random","logoGradientStripeColorA","logoGradientStripeColorB","logoGradientBorderColorA","logoGradientBorderColorB","handleBorderShape","TextField","label","value","onChange","event","target","type","InputLabelProps","shrink","FormControlLabel","control","Checkbox","checked","onChangeComplete","rgb","hex","role","aria-label","createMuiTheme","palette","ReactDOM","render","ThemeProvider","CssBaseline","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.601ac4fe.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport React from 'react';\r\n\r\nexport const EvolveLogo = ({ logoFill, stripeFill, useGradientForLogo, useGradientForLogoStripe, logoGradientColorA, logoGradientColorB, logoStripeGradientColorA, logoStripeGradientColorB }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"333.84\" height=\"258.96\">\r\n        <defs>\r\n            <linearGradient id=\"logoGradient\" x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\" >\r\n                <stop offset=\"0%\" style={{stopColor: `rgb(${logoGradientColorA.r}, ${logoGradientColorA.g}, ${logoGradientColorA.b})`, stopOpacity: '1'}} />\r\n                <stop offset=\"100%\" style={{stopColor: `rgb(${logoGradientColorB.r}, ${logoGradientColorB.g}, ${logoGradientColorB.b})`, stopOpacity: '1'}} />\r\n            </linearGradient>\r\n            <linearGradient id=\"logoStripeGradient\" x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\" >\r\n                <stop offset=\"0%\" style={{stopColor: `rgb(${logoStripeGradientColorA.r}, ${logoStripeGradientColorA.g}, ${logoStripeGradientColorA.b})`, stopOpacity: '1'}} />\r\n                <stop offset=\"100%\" style={{stopColor: `rgb(${logoStripeGradientColorB.r}, ${logoStripeGradientColorB.g}, ${logoStripeGradientColorB.b})`, stopOpacity: '1'}} />\r\n            </linearGradient>\r\n        </defs>\r\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\" fill={useGradientForLogo ? 'url(#logoGradient)': logoFill} d=\"M121.2 0c1.426 1.208 5.785 13.844 7.44 16.56 7.094 11.642 17.701 20.691 32.4 24.72 12.36 3.388 27.14.679 39.12-1.2 16.164-2.535 40.993 6.162 47.04 13.68V54l-62.64 32.16-51.12 23.76c-20.572 8.972-41.482 16.832-62.88 25.2 2.813-11.921 18.389-22.744 25.2-31.44-23.375-3.529-39.715 11.846-42.96 30.24l-.48-.24c-.836-7.516-2.729-16.833-1.2-25.44 5.247-29.519 24.988-47.529 56.16-50.64-4.015-21.241-2.977-35.751 7.44-50.4L121.2 0zM260.4 65.76h-.96l-10.8 6.72-30 18-17.28 9.36h-.48c5.172 5.945 12.269 9.335 13.92 18.96l46.08-24 11.76-6.48c1.22-6.56-9.887-17.481-12.24-22.56zm0 27.36v.48c-8.881-1.973-13.943-10.294-9.84-20.64 5.712 2.498 14.969 10.63 9.84 20.16zM275.76 102.72c3.659 4.162-4.919 17.673-6.24 19.44-7.975 10.671-20.086 16.899-35.28 20.4-5.264 1.213-15.092 2.337-19.92-.24l1.2-2.88 11.04-6.24c10.258-6.09 20.339-12.029 30.24-18.24l18.96-12.24zM147.36 125.28h.72c-1.976 8.791-2 17.42-3.12 27.36-11.811 3.601-24.535 13.232-36.72 15.6v-1.2l.48-5.76c-4.696 2.225-8.873 4.848-12.72 7.92l-6.24 6.72-23.52 8.4-.24-.72c-4.309-7.302-2.854-20.482-2.16-30L84 148.08c13.663-4.23 26.733-8.237 39.36-13.2 7.162-2.815 18.204-5.318 24-9.6zM148.32 172.56l4.08 9.12c2.555 5.001 8.542 10.831 10.08 15.6l-32.88 14.64c-3.387 1.47-9.302 5.621-12.96 5.28-3.029-9.69-6.633-16.598-8.4-29.04 9.643-2.31 19.048-6.932 27.84-10.56l12.24-5.04zM82.56 196.32h.96c.946 13.094 7.07 20.438 12 29.28-6.53-2.958-19.107-19.371-22.56-26.16l9.6-3.12zM270.24 210h.48c-2.386 4.927-9.337 9.074-13.68 12.24-13.354 9.736-37.034 23.062-62.88 18-15.556-3.046-26.136-8.549-37.68-14.88l.24-.48 24.72-11.28c17.967 14.36 56.248 14.938 78 3.84 4.02-2.051 8.217-3.976 10.8-7.44zM143.76 230.4l2.88 10.56c2.895 6.947 9.335 14.991 16.56 17.52v.48h-.24c-9.081-3.985-16.927-8.708-24.24-14.4l-8.64-8.16.24-.48 13.44-5.52z\"/>\r\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\"  fill={useGradientForLogoStripe ? 'url(#logoStripeGradient)': stripeFill} d=\"M333.36 4.8h.48c-4.186 5.204-11.617 8.983-17.04 12.96-13.511 9.908-27.136 19.626-41.28 29.04-54.721 36.42-112.929 66.547-181.2 90-21.228 7.292-43.365 11.471-67.68 16.32-4.13.824-22.602 3.975-26.64 2.4 12.233-1.481 24.56-5.643 35.52-9.12 24.506-7.774 46.93-15.145 69.36-24.72 15.469-6.604 30.448-12.794 45.6-19.44l36.24-17.52 25.92-12.96c11.326-6.64 23.667-11.397 34.56-18.24l18.48-9.6 43.68-24.96 24-14.16zM333.6 52.8c-.55 2.354-13.348 10.599-16.32 12.72-14.792 10.556-29.239 21.599-44.88 31.44-16.247 10.223-32.642 20.804-49.44 30.72-43.288 25.552-90.547 45.371-143.28 61.44-17.97 5.476-36.609 8.591-57.12 12.24-4.021.715-17.643 3.277-21.6 1.68h.48l24.96-6c17.381-5.257 34.61-10.037 50.64-16.32 30.742-12.05 60.8-25.461 90.24-38.4l47.52-23.76c9.78-3.886 20.45-9.901 29.76-15.36 9.372-5.495 19.537-9.619 28.32-15.6l12.48-6.48 34.08-19.92 14.16-8.4zM333.36 105.6l.48.24-22.56 16.8c-14.25 10.17-28.381 20.518-43.44 30-52.551 33.092-105.202 61.556-169.68 83.52-21.813 7.43-44.457 12.234-69.6 17.04-4.411.843-23.117 4.15-27.6 2.4 9.075-.652 18.567-4.021 26.64-6.48 21.889-6.669 42.597-13.094 62.64-21.12 24.882-9.964 48.78-20.665 72.24-31.2 13.588-6.102 28.718-12.513 41.76-20.16 14.316-8.395 29.82-14.532 43.92-22.8 19.888-11.662 40.469-21.73 60-33.36l25.2-14.88z\"/>\r\n    </svg>\r\n);\r\n\r\nexport const EvolveBorder = ({ borderColor, useGradientForBorder, logoBorderGradientColorA, logoBorderGradientColorB, useRect, useCircle }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"500\" preserveAspectRatio=\"none\">\r\n        <defs>\r\n            <linearGradient id=\"logoBorderGradient\">\r\n                <stop offset=\"0\" style={{stopColor: `rgb(${logoBorderGradientColorA.r}, ${logoBorderGradientColorA.g}, ${logoBorderGradientColorA.b})`}} />\r\n                <stop offset=\"1\" style={{stopColor: `rgb(${logoBorderGradientColorB.r}, ${logoBorderGradientColorB.g}, ${logoBorderGradientColorB.b})`}} />\r\n            </linearGradient>\r\n        </defs>\r\n        {useRect && (<rect x=\"10\" y=\"10\" width=\"480\" height=\"480\" stroke={useGradientForBorder ? 'url(#logoBorderGradient)' : borderColor} fill=\"transparent\" strokeWidth=\"7\"/>)}\r\n        {useCircle && (<circle r=\"240\" cy=\"50%\" cx=\"50%\" style={{fill: 'none', stroke: useGradientForBorder ? 'url(#logoBorderGradient)' : borderColor, strokeWidth: 7}} />)}\r\n    </svg>\r\n)\r\n","import React from 'react';\r\n\r\nconst footerStyle = {\r\n    fontSize: \"15px\",\r\n    color: \"white\",\r\n    textAlign: \"right\",\r\n    padding: \"20px\",\r\n    position: \"fixed\",\r\n    left: \"0\",\r\n    bottom: \"0\",\r\n    width: \"100%\"\r\n  };\r\n\r\nexport default function Footer({ children }) {\r\n    return (\r\n      <div>\r\n        <div style={footerStyle}>{children}</div>\r\n      </div>\r\n    );\r\n  }","import React, { useState } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport randomColor from 'randomcolor';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Button, Typography, TextField, Container, Checkbox, FormControlLabel } from '@material-ui/core';\r\nimport { SketchPicker } from 'react-color';\r\nimport { EvolveLogo, EvolveBorder } from './Logos';\r\nimport Footer from './Footer';\r\n\r\nexport default function Gen() {\r\n  const [name, setName] = useState(\"bay\");\r\n  const [fontSize, setFontSize] = useState(60);\r\n  const [logoFilterColor, setLogoFilterColor] = useState(\"#FFFFFF\");\r\n  const [logoGradientColorA, setLogoGradientColorA] = useState({a: 1, b: 255, g: 0, r: 255});\r\n  const [logoGradientColorB, setLogoGradientColorB] = useState({a: 1, b: 255, g: 255, r: 0});\r\n  const [logoStripeGradientColorA, setLogoStripeGradientColorA] = useState({a: 1, b: 255, g: 0, r: 255});\r\n  const [logoStripeGradientColorB, setLogoStripeGradientColorB] = useState({a: 1, b: 255, g: 255, r: 0});\r\n  const [logoBorderGradientColorA, setLogoBorderGradientColorA] = useState({a: 1, b: 255, g: 255, r: 0});\r\n  const [logoBorderGradientColorB, setLogoBorderGradientColorB] = useState({a: 1, b: 255, g: 0, r: 255});\r\n  const [logoStripeColor, setLogoStripeColor] = useState(\"#FF0000\");\r\n  const [textColor, setTextColor] = useState({a: 1, b: 255, g: 255, r: 255});\r\n  const [borderColor, setBorderColor] = useState(\"#FF0000\");\r\n  const [useGradientForLogo, setUseGradientForLogo] = useState(false);\r\n  const [useGradientForLogoStripe, setUseGradientForLogoStripe] = useState(false);\r\n  const [useGradientForBorder, setUseGradientForBorder] = useState(false);\r\n  const [useRectBorder, setUseRectBorder] = useState(false);\r\n  const [useCircleBorder, setUseCircleBorder] = useState(true);\r\n\r\n  const dynamicStyles = makeStyles(theme => ({\r\n    resultWrapper: {\r\n      flexGrow: 1,\r\n      width: '500px',\r\n      height: '500px',\r\n      backgroundImage: `url(${process.env.PUBLIC_URL}/assets/backgrounds/1.png)`,\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundSize: 'contain'\r\n    },\r\n    logoWrapper: {\r\n      backgroundSize: 'contain',\r\n      margin: '0 auto',\r\n      width: '500px',\r\n      height: '500px',\r\n    },\r\n    logo: {\r\n      margin: '0 auto',\r\n      width: '333px',\r\n      height: '258px',\r\n      position: 'relative'\r\n    },\r\n    logoBorder: {\r\n      width: '500px',\r\n      height: '500px',\r\n      position: 'absolute',\r\n    },\r\n    logoItems: {\r\n      position: 'relative'\r\n    },\r\n    textWrapper: {\r\n      color: `rgba(${textColor.r}, ${textColor.g}, ${textColor.b}, ${textColor.a})`,\r\n      fontSize: `${fontSize}px`,\r\n      fontFamily: 'SFProDisplay-BlackItalic',\r\n    }\r\n  }))()\r\n\r\n  const handleNameChange = event => setName(event.target.value);\r\n  const handleFontSizeChange = event => setFontSize(event.target.value);\r\n  const handleLogoFilterColorChange = (color) => setLogoFilterColor(color.hex);\r\n  const handleLogoGradientAColorChange = (color) => setLogoGradientColorA(color.rgb);\r\n  const handleLogoGradientBColorChange = (color) => setLogoGradientColorB(color.rgb);\r\n  const handleLogoStripeColorChange = (color) => setLogoStripeColor(color.hex);\r\n  const handleTextColorChange = (color) => setTextColor(color.rgb);\r\n  const handleBorderColorChange = (color) => setBorderColor(color.hex);\r\n  const handleChangeUseGradientForLogo = event => setUseGradientForLogo(event.target.checked);\r\n  const handleChangeUseGradientForLogoStripe = event => setUseGradientForLogoStripe(event.target.checked);\r\n  const handleChangeUseGradientForBorder = event => setUseGradientForBorder(event.target.checked);\r\n  const handleLogoStripeGradientAColorChange = (color) => setLogoStripeGradientColorA(color.rgb);\r\n  const handleLogoStripeGradientBColorChange = (color) => setLogoStripeGradientColorB(color.rgb);\r\n  const handleLogoBorderGradientAColorChange = (color) => setLogoBorderGradientColorA(color.rgb);\r\n  const handleLogoBorderGradientBColorChange = (color) => setLogoBorderGradientColorB(color.rgb);\r\n  const handleChangeUseCircleForBorder = event => setUseCircleBorder(event.target.checked);\r\n  const handleChangeUseRectForBorder = event => setUseRectBorder(event.target.checked);\r\n\r\n  const handleSave = () => {\r\n    //https://github.com/niklasvh/html2canvas/issues/1438\r\n    //Scroll to top so that the canvas can capture the element\r\n    window.scrollTo(0,0);\r\n    document.documentElement.classList.add(\"hide-scrollbar\");\r\n    html2canvas(document.querySelector(\"#resultImg\"), {useCORS : true}).then(canvas => {\r\n      saveAs(canvas.toDataURL(), `${name}-ev0lve-avatar.png`)\r\n      //document.body.appendChild(canvas);\r\n    });\r\n    document.documentElement.classList.remove(\"hide-scrollbar\");\r\n  }\r\n\r\n  const saveAs = (uri, filename) => {\r\n    let link = document.createElement('a');\r\n    if (typeof link.download === 'string') {\r\n        link.href = uri;\r\n        link.download = filename;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    } else {\r\n        window.open(uri);\r\n    }\r\n  }\r\n\r\n  const handleRandomMode = () => {\r\n    setLogoFilterColor(randomColor());\r\n    const logoGradientColorA = randomColor({format: 'rgbArray'});\r\n    setLogoGradientColorA({a: 1, b: logoGradientColorA[2], g: logoGradientColorA[1], r: logoGradientColorA[0]});\r\n    const logoGradientColorB = randomColor({format: 'rgbArray'});\r\n    setLogoGradientColorB({a: 1, b: logoGradientColorB[2], g: logoGradientColorB[1], r: logoGradientColorB[0]});\r\n    setLogoStripeColor(randomColor());\r\n    const textColor = randomColor({format: 'rgbArray'});\r\n    setTextColor({a: 1, b: textColor[2], g: textColor[1], r: textColor[0]});\r\n    setBorderColor(randomColor());\r\n    setUseGradientForLogo(Math.random() >= 0.5);\r\n    setUseGradientForLogoStripe(Math.random() >= 0.5);\r\n    setUseGradientForBorder(Math.random() >= 0.5);\r\n    const logoGradientStripeColorA = randomColor({format: 'rgbArray'});\r\n    setLogoStripeGradientColorA({a: 1, b: logoGradientStripeColorA[2], g: logoGradientStripeColorA[1], r: logoGradientStripeColorA[0]});\r\n    const logoGradientStripeColorB = randomColor({format: 'rgbArray'});\r\n    setLogoStripeGradientColorB({a: 1, b: logoGradientStripeColorB[2], g: logoGradientStripeColorB[1], r: logoGradientStripeColorB[0]});\r\n    const logoGradientBorderColorA = randomColor({format: 'rgbArray'});\r\n    setLogoBorderGradientColorA({a: 1, b: logoGradientBorderColorA[2], g: logoGradientBorderColorA[1], r: logoGradientBorderColorA[0]});\r\n    const logoGradientBorderColorB = randomColor({format: 'rgbArray'});\r\n    setLogoBorderGradientColorB({a: 1, b: logoGradientBorderColorB[2], g: logoGradientBorderColorB[1], r: logoGradientBorderColorB[0]});\r\n    const handleBorderShape = Math.random() >= 0.5; \r\n    setUseCircleBorder(handleBorderShape);\r\n    setUseRectBorder(!handleBorderShape);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"xl\">\r\n        <Grid container direction=\"column\" spacing={4} justify=\"center\" alignItems=\"center\">\r\n          <Grid item>\r\n            <Grid container className={dynamicStyles.resultWrapper}  id=\"resultImg\" justify=\"center\" alignItems=\"center\" direction=\"column\">\r\n              <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" item className={dynamicStyles.logoWrapper}>\r\n                <Grid item className={dynamicStyles.logo}>\r\n                  <EvolveLogo \r\n                    className={dynamicStyles.logoItems}\r\n                    useGradientForLogo={useGradientForLogo}\r\n                    useGradientForLogoStripe={useGradientForLogoStripe}\r\n                    logoGradientColorA={logoGradientColorA}\r\n                    logoGradientColorB={logoGradientColorB}\r\n                    logoStripeGradientColorA={logoStripeGradientColorA}\r\n                    logoStripeGradientColorB={logoStripeGradientColorB}\r\n                    logoFill={logoFilterColor}\r\n                    stripeFill={logoStripeColor}\r\n                  />\r\n                </Grid>\r\n                <Grid item><Typography className={`${dynamicStyles.textWrapper}`}>{name}</Typography></Grid>\r\n                <Grid item className={dynamicStyles.logoBorder}>\r\n                  <EvolveBorder\r\n                    useGradientForBorder={useGradientForBorder}\r\n                    borderColor={borderColor}\r\n                    logoBorderGradientColorA={logoBorderGradientColorA}\r\n                    logoBorderGradientColorB={logoBorderGradientColorB}\r\n                    useRect={useRectBorder}\r\n                    useCircle={useCircleBorder}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item id=\"controls\" justify=\"center\" alignItems=\"center\" spacing={2} container direction=\"column\">\r\n            <Grid item justify=\"center\" alignItems=\"center\" container spacing={2}>\r\n              <Grid item><Button variant=\"outlined\" onClick={handleSave}>Save</Button></Grid>\r\n              <Grid item><Button variant=\"outlined\" onClick={handleRandomMode}>Random</Button></Grid>\r\n            </Grid>\r\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n              <Grid item>\r\n                <TextField id=\"outlined-name\" label=\"Name\" variant=\"outlined\" value={name} onChange={handleNameChange} />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  id=\"outlined-name\"\r\n                  label=\"Font Size\"\r\n                  variant=\"outlined\"\r\n                  value={fontSize}\r\n                  onChange={handleFontSizeChange}\r\n                  type=\"number\"\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={useGradientForLogo}\r\n                      onChange={handleChangeUseGradientForLogo}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Use Gradient for Logo\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={useGradientForLogoStripe}\r\n                      onChange={handleChangeUseGradientForLogoStripe}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Use Gradient for Stripe\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={useGradientForBorder}\r\n                      onChange={handleChangeUseGradientForBorder}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Use Gradient for Border\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={useCircleBorder}\r\n                      onChange={handleChangeUseCircleForBorder}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Border Circle\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={useRectBorder}\r\n                      onChange={handleChangeUseRectForBorder}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Border Rect\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n              {useGradientForLogo ? (\r\n                <React.Fragment>\r\n                  <Grid item>\r\n                    <Typography>Gradient Color A of Logo</Typography>\r\n                    <SketchPicker\r\n                      color={logoGradientColorA}\r\n                      id=\"logoGradientColorA\"\r\n                      onChangeComplete={handleLogoGradientAColorChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography>Gradient Color B of Logo</Typography>\r\n                    <SketchPicker\r\n                      color={logoGradientColorB}\r\n                      id=\"logoGradientColorB\"\r\n                      onChangeComplete={handleLogoGradientBColorChange}\r\n                    />\r\n                  </Grid>\r\n                </React.Fragment>\r\n              ) : (\r\n                <React.Fragment>\r\n                  <Grid item>\r\n                    <Typography>Color of Logo</Typography>\r\n                    <SketchPicker\r\n                      color={logoFilterColor}\r\n                      id=\"logoFilterColor\"\r\n                      onChangeComplete={handleLogoFilterColorChange}\r\n                    />\r\n                  </Grid>\r\n                </React.Fragment>\r\n              )}\r\n              {useGradientForLogoStripe ? (\r\n                <React.Fragment>\r\n                  <Grid item>\r\n                    <Typography>Gradient Color A of Stripe</Typography>\r\n                    <SketchPicker\r\n                      color={logoStripeGradientColorA}\r\n                      id=\"logoStripeGradientColorA\"\r\n                      onChangeComplete={handleLogoStripeGradientAColorChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography>Gradient Color B of Stripe</Typography>\r\n                    <SketchPicker\r\n                      color={logoStripeGradientColorB}\r\n                      id=\"logoStripeGradientColorB\"\r\n                      onChangeComplete={handleLogoStripeGradientBColorChange}\r\n                    />\r\n                  </Grid>\r\n                </React.Fragment>\r\n              ) : (\r\n                  <React.Fragment>\r\n                    <Grid item>\r\n                      <Typography>Color of Logo Stripe</Typography>\r\n                      <SketchPicker\r\n                        color={logoStripeColor}\r\n                        id=\"logoStripeColor\"\r\n                        onChangeComplete={handleLogoStripeColorChange}\r\n                      />\r\n                    </Grid>\r\n                  </React.Fragment>\r\n              )}\r\n              <React.Fragment>\r\n                <Grid item>\r\n                  <Typography>Color of Text</Typography>\r\n                  <SketchPicker\r\n                    color={textColor}\r\n                    id=\"textColor\"\r\n                    onChangeComplete={handleTextColorChange}\r\n                  />\r\n                </Grid>\r\n              </React.Fragment>\r\n              {useGradientForBorder ? (\r\n                <React.Fragment>\r\n                  <Grid item>\r\n                    <Typography>Gradient Color A of Border</Typography>\r\n                    <SketchPicker\r\n                      color={logoBorderGradientColorA}\r\n                      id=\"logoBorderGradientColorA\"\r\n                      onChangeComplete={handleLogoBorderGradientAColorChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography>Gradient Color B of Border</Typography>\r\n                    <SketchPicker\r\n                      color={logoBorderGradientColorB}\r\n                      id=\"logoBorderGradientColorB\"\r\n                      onChangeComplete={handleLogoBorderGradientBColorChange}\r\n                    />\r\n                  </Grid>\r\n                </React.Fragment>\r\n              ) : (\r\n                <React.Fragment>\r\n                  <Grid item>\r\n                    <Typography>Color of Border</Typography>\r\n                    <SketchPicker\r\n                      color={borderColor}\r\n                      id=\"borderColor\"\r\n                      onChangeComplete={handleBorderColorChange}\r\n                    />\r\n                  </Grid>\r\n                </React.Fragment>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer>\r\n        Made with <span role=\"img\" aria-label=\"heart\">❤️</span> by bay\r\n      </Footer>\r\n    </React.Fragment>\r\n  );\r\n}","import  { createMuiTheme } from '@material-ui/core';\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n      type: 'dark',\r\n    },\r\n});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Gen from './Components/Gen';\r\nimport './assets/sass/index.sass';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport  { CssBaseline } from '@material-ui/core';\r\nimport { theme } from './Components/Theme';\r\n\r\nfunction App() {\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n          <CssBaseline />\r\n        <Gen />\r\n      </ThemeProvider>\r\n    );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}