{"version":3,"sources":["serviceWorker.js","Components/Logos.js","Components/Gen.js","Components/Theme.js","index.js"],"names":["Boolean","window","location","hostname","match","EvolveLogo","logoFill","stripeFill","useGradientForLogo","useGradientForLogoStripe","logoGradientColorA","logoGradientColorB","logoStripeGradientColorA","logoStripeGradientColorB","xmlns","width","height","id","x1","y1","x2","y2","offset","style","stopColor","r","g","b","stopOpacity","fillRule","clipRule","fill","d","EvolveBorder","borderColor","useGradientForBorder","logoBorderGradientColorA","logoBorderGradientColorB","preserveAspectRatio","cy","cx","stroke","strokeWidth","Gen","useState","name","setName","fontSize","setFontSize","logoFilterColor","setLogoFilterColor","a","setLogoGradientColorA","setLogoGradientColorB","setLogoStripeGradientColorA","setLogoStripeGradientColorB","setLogoBorderGradientColorA","setLogoBorderGradientColorB","logoStripeColor","setLogoStripeColor","textColor","setTextColor","setBorderColor","setUseGradientForLogo","setUseGradientForLogoStripe","setUseGradientForBorder","dynamicStyles","makeStyles","theme","resultWrapper","flexGrow","backgroundImage","process","backgroundRepeat","backgroundSize","logoWrapper","margin","logo","position","logoBorder","logoItems","textWrapper","color","fontFamily","saveAs","uri","filename","link","document","createElement","download","href","body","appendChild","click","removeChild","open","Fragment","Container","maxWidth","Grid","container","direction","spacing","justify","alignItems","item","className","Typography","Button","variant","onClick","scrollTo","documentElement","classList","add","html2canvas","querySelector","then","canvas","toDataURL","remove","randomColor","format","Math","random","logoGradientStripeColorA","logoGradientStripeColorB","logoGradientBorderColorA","logoGradientBorderColorB","TextField","label","value","onChange","event","target","type","InputLabelProps","shrink","FormControlLabel","control","Checkbox","checked","onChangeComplete","rgb","hex","createMuiTheme","palette","ReactDOM","render","ThemeProvider","CssBaseline","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd9b0c2f.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\n\nexport const EvolveLogo = ({ logoFill, stripeFill, useGradientForLogo, useGradientForLogoStripe, logoGradientColorA, logoGradientColorB, logoStripeGradientColorA, logoStripeGradientColorB }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"333.84\" height=\"258.96\">\n        <defs>\n            <linearGradient id=\"logoGradient\" x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\" >\n                <stop offset=\"0%\" style={{stopColor: `rgb(${logoGradientColorA.r}, ${logoGradientColorA.g}, ${logoGradientColorA.b})`, stopOpacity: '1'}} />\n                <stop offset=\"100%\" style={{stopColor: `rgb(${logoGradientColorB.r}, ${logoGradientColorB.g}, ${logoGradientColorB.b})`, stopOpacity: '1'}} />\n            </linearGradient>\n            <linearGradient id=\"logoStripeGradient\" x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\" >\n                <stop offset=\"0%\" style={{stopColor: `rgb(${logoStripeGradientColorA.r}, ${logoStripeGradientColorA.g}, ${logoStripeGradientColorA.b})`, stopOpacity: '1'}} />\n                <stop offset=\"100%\" style={{stopColor: `rgb(${logoStripeGradientColorB.r}, ${logoStripeGradientColorB.g}, ${logoStripeGradientColorB.b})`, stopOpacity: '1'}} />\n            </linearGradient>\n        </defs>\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\" fill={useGradientForLogo ? 'url(#logoGradient)': logoFill} d=\"M121.2 0c1.426 1.208 5.785 13.844 7.44 16.56 7.094 11.642 17.701 20.691 32.4 24.72 12.36 3.388 27.14.679 39.12-1.2 16.164-2.535 40.993 6.162 47.04 13.68V54l-62.64 32.16-51.12 23.76c-20.572 8.972-41.482 16.832-62.88 25.2 2.813-11.921 18.389-22.744 25.2-31.44-23.375-3.529-39.715 11.846-42.96 30.24l-.48-.24c-.836-7.516-2.729-16.833-1.2-25.44 5.247-29.519 24.988-47.529 56.16-50.64-4.015-21.241-2.977-35.751 7.44-50.4L121.2 0zM260.4 65.76h-.96l-10.8 6.72-30 18-17.28 9.36h-.48c5.172 5.945 12.269 9.335 13.92 18.96l46.08-24 11.76-6.48c1.22-6.56-9.887-17.481-12.24-22.56zm0 27.36v.48c-8.881-1.973-13.943-10.294-9.84-20.64 5.712 2.498 14.969 10.63 9.84 20.16zM275.76 102.72c3.659 4.162-4.919 17.673-6.24 19.44-7.975 10.671-20.086 16.899-35.28 20.4-5.264 1.213-15.092 2.337-19.92-.24l1.2-2.88 11.04-6.24c10.258-6.09 20.339-12.029 30.24-18.24l18.96-12.24zM147.36 125.28h.72c-1.976 8.791-2 17.42-3.12 27.36-11.811 3.601-24.535 13.232-36.72 15.6v-1.2l.48-5.76c-4.696 2.225-8.873 4.848-12.72 7.92l-6.24 6.72-23.52 8.4-.24-.72c-4.309-7.302-2.854-20.482-2.16-30L84 148.08c13.663-4.23 26.733-8.237 39.36-13.2 7.162-2.815 18.204-5.318 24-9.6zM148.32 172.56l4.08 9.12c2.555 5.001 8.542 10.831 10.08 15.6l-32.88 14.64c-3.387 1.47-9.302 5.621-12.96 5.28-3.029-9.69-6.633-16.598-8.4-29.04 9.643-2.31 19.048-6.932 27.84-10.56l12.24-5.04zM82.56 196.32h.96c.946 13.094 7.07 20.438 12 29.28-6.53-2.958-19.107-19.371-22.56-26.16l9.6-3.12zM270.24 210h.48c-2.386 4.927-9.337 9.074-13.68 12.24-13.354 9.736-37.034 23.062-62.88 18-15.556-3.046-26.136-8.549-37.68-14.88l.24-.48 24.72-11.28c17.967 14.36 56.248 14.938 78 3.84 4.02-2.051 8.217-3.976 10.8-7.44zM143.76 230.4l2.88 10.56c2.895 6.947 9.335 14.991 16.56 17.52v.48h-.24c-9.081-3.985-16.927-8.708-24.24-14.4l-8.64-8.16.24-.48 13.44-5.52z\"/>\n        <path fillRule=\"evenodd\" clipRule=\"evenodd\"  fill={useGradientForLogoStripe ? 'url(#logoStripeGradient)': stripeFill} d=\"M333.36 4.8h.48c-4.186 5.204-11.617 8.983-17.04 12.96-13.511 9.908-27.136 19.626-41.28 29.04-54.721 36.42-112.929 66.547-181.2 90-21.228 7.292-43.365 11.471-67.68 16.32-4.13.824-22.602 3.975-26.64 2.4 12.233-1.481 24.56-5.643 35.52-9.12 24.506-7.774 46.93-15.145 69.36-24.72 15.469-6.604 30.448-12.794 45.6-19.44l36.24-17.52 25.92-12.96c11.326-6.64 23.667-11.397 34.56-18.24l18.48-9.6 43.68-24.96 24-14.16zM333.6 52.8c-.55 2.354-13.348 10.599-16.32 12.72-14.792 10.556-29.239 21.599-44.88 31.44-16.247 10.223-32.642 20.804-49.44 30.72-43.288 25.552-90.547 45.371-143.28 61.44-17.97 5.476-36.609 8.591-57.12 12.24-4.021.715-17.643 3.277-21.6 1.68h.48l24.96-6c17.381-5.257 34.61-10.037 50.64-16.32 30.742-12.05 60.8-25.461 90.24-38.4l47.52-23.76c9.78-3.886 20.45-9.901 29.76-15.36 9.372-5.495 19.537-9.619 28.32-15.6l12.48-6.48 34.08-19.92 14.16-8.4zM333.36 105.6l.48.24-22.56 16.8c-14.25 10.17-28.381 20.518-43.44 30-52.551 33.092-105.202 61.556-169.68 83.52-21.813 7.43-44.457 12.234-69.6 17.04-4.411.843-23.117 4.15-27.6 2.4 9.075-.652 18.567-4.021 26.64-6.48 21.889-6.669 42.597-13.094 62.64-21.12 24.882-9.964 48.78-20.665 72.24-31.2 13.588-6.102 28.718-12.513 41.76-20.16 14.316-8.395 29.82-14.532 43.92-22.8 19.888-11.662 40.469-21.73 60-33.36l25.2-14.88z\"/>\n    </svg>\n);\n\nexport const EvolveBorder = ({ borderColor, useGradientForBorder, logoBorderGradientColorA, logoBorderGradientColorB }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"500\" preserveAspectRatio=\"none\">\n        <defs>\n            <linearGradient id=\"logoBorderGradient\">\n                <stop offset=\"0\" style={{stopColor: `rgb(${logoBorderGradientColorA.r}, ${logoBorderGradientColorA.g}, ${logoBorderGradientColorA.b})`}} />\n                <stop offset=\"1\" style={{stopColor: `rgb(${logoBorderGradientColorB.r}, ${logoBorderGradientColorB.g}, ${logoBorderGradientColorB.b})`}} />\n            </linearGradient>\n        </defs>\n        <circle r=\"240\" cy=\"50%\" cx=\"50%\" style={{fill: 'none', stroke: useGradientForBorder ? 'url(#logoBorderGradient)' : borderColor, strokeWidth: 7}} />\n    </svg>\n)\n","import React, { useState } from 'react';\nimport html2canvas from 'html2canvas';\nimport randomColor from 'randomcolor';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Button, Typography, TextField, Container, Checkbox, FormControlLabel } from '@material-ui/core';\nimport { SketchPicker } from 'react-color';\nimport { EvolveLogo, EvolveBorder } from './Logos';\n\nexport default function Gen() {\n  const [name, setName] = useState(\"bay\");\n  const [fontSize, setFontSize] = useState(60);\n  const [logoFilterColor, setLogoFilterColor] = useState(\"#FFFFFF\");\n  const [logoGradientColorA, setLogoGradientColorA] = useState({a: 1, b: 255, g: 0, r: 255});\n  const [logoGradientColorB, setLogoGradientColorB] = useState({a: 1, b: 255, g: 255, r: 0});\n  const [logoStripeGradientColorA, setLogoStripeGradientColorA] = useState({a: 1, b: 255, g: 0, r: 255});\n  const [logoStripeGradientColorB, setLogoStripeGradientColorB] = useState({a: 1, b: 255, g: 255, r: 0});\n  const [logoBorderGradientColorA, setLogoBorderGradientColorA] = useState({a: 1, b: 255, g: 255, r: 0});\n  const [logoBorderGradientColorB, setLogoBorderGradientColorB] = useState({a: 1, b: 255, g: 0, r: 255});\n  const [logoStripeColor, setLogoStripeColor] = useState(\"#FF0000\");\n  const [textColor, setTextColor] = useState({a: 1, b: 255, g: 255, r: 255});\n  const [borderColor, setBorderColor] = useState(\"#FF0000\");\n  const [useGradientForLogo, setUseGradientForLogo] = useState(false);\n  const [useGradientForLogoStripe, setUseGradientForLogoStripe] = useState(false);\n  const [useGradientForBorder, setUseGradientForBorder] = useState(false);\n\n  const dynamicStyles = makeStyles(theme => ({\n    resultWrapper: {\n      flexGrow: 1,\n      width: '500px',\n      height: '500px',\n      backgroundImage: `url(${process.env.PUBLIC_URL}/assets/backgrounds/1.png)`,\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'contain'\n    },\n    logoWrapper: {\n      backgroundSize: 'contain',\n      margin: '0 auto',\n      width: '500px',\n      height: '500px',\n    },\n    logo: {\n      margin: '0 auto',\n      width: '333px',\n      height: '258px',\n      position: 'relative'\n    },\n    logoBorder: {\n      width: '500px',\n      height: '500px',\n      position: 'absolute',\n    },\n    logoItems: {\n      position: 'relative'\n    },\n    textWrapper: {\n      color: `rgba(${textColor.r}, ${textColor.g}, ${textColor.b}, ${textColor.a})`,\n      fontSize: `${fontSize}px`,\n      fontFamily: 'SFProDisplay-BlackItalic',\n    }\n  }))()\n\n  const handleNameChange = event => setName(event.target.value);\n  const handleFontSizeChange = event => setFontSize(event.target.value);\n  const handleLogoFilterColorChange = (color) => setLogoFilterColor(color.hex);\n  const handleLogoGradientAColorChange = (color) => setLogoGradientColorA(color.rgb);\n  const handleLogoGradientBColorChange = (color) => setLogoGradientColorB(color.rgb);\n  const handleLogoStripeColorChange = (color) => setLogoStripeColor(color.hex);\n  const handleTextColorChange = (color) => setTextColor(color.rgb);\n  const handleBorderColorChange = (color) => setBorderColor(color.hex);\n  const handleChangeUseGradientForLogo = event => setUseGradientForLogo(event.target.checked);\n  const handleChangeUseGradientForLogoStripe = event => setUseGradientForLogoStripe(event.target.checked);\n  const handleChangeUseGradientForBorder = event => setUseGradientForBorder(event.target.checked);\n  const handleLogoStripeGradientAColorChange = (color) => setLogoStripeGradientColorA(color.rgb);\n  const handleLogoStripeGradientBColorChange = (color) => setLogoStripeGradientColorB(color.rgb);\n  const handleLogoBorderGradientAColorChange = (color) => setLogoBorderGradientColorA(color.rgb);\n  const handleLogoBorderGradientBColorChange = (color) => setLogoBorderGradientColorB(color.rgb);\n\n\n  const handleSave = () => {\n    //https://github.com/niklasvh/html2canvas/issues/1438\n    //Scroll to top so that the canvas can capture the element\n    window.scrollTo(0,0);\n    document.documentElement.classList.add(\"hide-scrollbar\");\n    html2canvas(document.querySelector(\"#resultImg\")).then(canvas => {\n      saveAs(canvas.toDataURL(), `${name}-ev0lve-avatar.png`)\n      //document.body.appendChild(canvas);\n    });\n    document.documentElement.classList.remove(\"hide-scrollbar\");\n  }\n\n  const saveAs = (uri, filename) => {\n    let link = document.createElement('a');\n    if (typeof link.download === 'string') {\n        link.href = uri;\n        link.download = filename;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    } else {\n        window.open(uri);\n    }\n  }\n\n  const handleRandomMode = () => {\n    setLogoFilterColor(randomColor());\n    const logoGradientColorA = randomColor({format: 'rgbArray'});\n    setLogoGradientColorA({a: 1, b: logoGradientColorA[2], g: logoGradientColorA[1], r: logoGradientColorA[0]});\n    const logoGradientColorB = randomColor({format: 'rgbArray'});\n    setLogoGradientColorB({a: 1, b: logoGradientColorB[2], g: logoGradientColorB[1], r: logoGradientColorB[0]});\n    setLogoStripeColor(randomColor());\n    const textColor = randomColor({format: 'rgbArray'});\n    setTextColor({a: 1, b: textColor[2], g: textColor[1], r: textColor[0]});\n    setBorderColor(randomColor());\n    setUseGradientForLogo(Math.random() >= 0.5);\n    setUseGradientForLogoStripe(Math.random() >= 0.5);\n    setUseGradientForBorder(Math.random() >= 0.5);\n    const logoGradientStripeColorA = randomColor({format: 'rgbArray'});\n    setLogoStripeGradientColorA({a: 1, b: logoGradientStripeColorA[2], g: logoGradientStripeColorA[1], r: logoGradientStripeColorA[0]});\n    const logoGradientStripeColorB = randomColor({format: 'rgbArray'});\n    setLogoStripeGradientColorB({a: 1, b: logoGradientStripeColorB[2], g: logoGradientStripeColorB[1], r: logoGradientStripeColorB[0]});\n    const logoGradientBorderColorA = randomColor({format: 'rgbArray'});\n    setLogoBorderGradientColorA({a: 1, b: logoGradientBorderColorA[2], g: logoGradientBorderColorA[1], r: logoGradientBorderColorA[0]});\n    const logoGradientBorderColorB = randomColor({format: 'rgbArray'});\n    setLogoBorderGradientColorB({a: 1, b: logoGradientBorderColorB[2], g: logoGradientBorderColorB[1], r: logoGradientBorderColorB[0]});\n  }\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"xl\">\n        <Grid container direction=\"column\" spacing={4} justify=\"center\" alignItems=\"center\">\n          <Grid item>\n            <Grid container className={dynamicStyles.resultWrapper}  id=\"resultImg\" justify=\"center\" alignItems=\"center\" direction=\"column\">\n              <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" item className={dynamicStyles.logoWrapper}>\n                <Grid item className={dynamicStyles.logo}>\n                  <EvolveLogo \n                    className={dynamicStyles.logoItems}\n                    useGradientForLogo={useGradientForLogo}\n                    useGradientForLogoStripe={useGradientForLogoStripe}\n                    logoGradientColorA={logoGradientColorA}\n                    logoGradientColorB={logoGradientColorB}\n                    logoStripeGradientColorA={logoStripeGradientColorA}\n                    logoStripeGradientColorB={logoStripeGradientColorB}\n                    logoFill={logoFilterColor}\n                    stripeFill={logoStripeColor}\n                  />\n                </Grid>\n                <Grid item><Typography className={`${dynamicStyles.textWrapper}`}>{name}</Typography></Grid>\n                <Grid item className={dynamicStyles.logoBorder}>\n                  <EvolveBorder\n                    useGradientForBorder={useGradientForBorder}\n                    borderColor={borderColor}\n                    logoBorderGradientColorA={logoBorderGradientColorA}\n                    logoBorderGradientColorB={logoBorderGradientColorB}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item id=\"controls\" justify=\"center\" alignItems=\"center\" spacing={2} container direction=\"column\">\n            <Grid item justify=\"center\" alignItems=\"center\" container spacing={2}>\n              <Grid item><Button variant=\"outlined\" onClick={handleSave}>Save</Button></Grid>\n              <Grid item><Button variant=\"outlined\" onClick={handleRandomMode}>Random</Button></Grid>\n            </Grid>\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n              <Grid item>\n                <TextField id=\"outlined-name\" label=\"Name\" variant=\"outlined\" value={name} onChange={handleNameChange} />\n              </Grid>\n              <Grid item>\n                <TextField\n                  id=\"outlined-name\"\n                  label=\"Font Size\"\n                  variant=\"outlined\"\n                  value={fontSize}\n                  onChange={handleFontSizeChange}\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={useGradientForLogo}\n                      onChange={handleChangeUseGradientForLogo}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"Use Gradient for Logo\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={useGradientForLogoStripe}\n                      onChange={handleChangeUseGradientForLogoStripe}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"Use Gradient for Stripe\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={useGradientForBorder}\n                      onChange={handleChangeUseGradientForBorder}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"Use Gradient for Border\"\n                />\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n              {useGradientForLogo ? (\n                <React.Fragment>\n                  <Grid item>\n                    <Typography>Gradient Color A of Logo</Typography>\n                    <SketchPicker\n                      color={logoGradientColorA}\n                      id=\"logoGradientColorA\"\n                      onChangeComplete={handleLogoGradientAColorChange}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Typography>Gradient Color B of Logo</Typography>\n                    <SketchPicker\n                      color={logoGradientColorB}\n                      id=\"logoGradientColorB\"\n                      onChangeComplete={handleLogoGradientBColorChange}\n                    />\n                  </Grid>\n                </React.Fragment>\n              ) : (\n                <React.Fragment>\n                  <Grid item>\n                    <Typography>Color of Logo</Typography>\n                    <SketchPicker\n                      color={logoFilterColor}\n                      id=\"logoFilterColor\"\n                      onChangeComplete={handleLogoFilterColorChange}\n                    />\n                  </Grid>\n                </React.Fragment>\n              )}\n              {useGradientForLogoStripe ? (\n                <React.Fragment>\n                  <Grid item>\n                    <Typography>Gradient Color A of Stripe</Typography>\n                    <SketchPicker\n                      color={logoStripeGradientColorA}\n                      id=\"logoStripeGradientColorA\"\n                      onChangeComplete={handleLogoStripeGradientAColorChange}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Typography>Gradient Color B of Stripe</Typography>\n                    <SketchPicker\n                      color={logoStripeGradientColorB}\n                      id=\"logoStripeGradientColorB\"\n                      onChangeComplete={handleLogoStripeGradientBColorChange}\n                    />\n                  </Grid>\n                </React.Fragment>\n              ) : (\n                  <React.Fragment>\n                    <Grid item>\n                      <Typography>Color of Logo Stripe</Typography>\n                      <SketchPicker\n                        color={logoStripeColor}\n                        id=\"logoStripeColor\"\n                        onChangeComplete={handleLogoStripeColorChange}\n                      />\n                    </Grid>\n                  </React.Fragment>\n              )}\n              <React.Fragment>\n                <Grid item>\n                  <Typography>Color of Text</Typography>\n                  <SketchPicker\n                    color={textColor}\n                    id=\"textColor\"\n                    onChangeComplete={handleTextColorChange}\n                  />\n                </Grid>\n              </React.Fragment>\n              {useGradientForBorder ? (\n                <React.Fragment>\n                  <Grid item>\n                    <Typography>Gradient Color A of Border</Typography>\n                    <SketchPicker\n                      color={logoBorderGradientColorA}\n                      id=\"logoBorderGradientColorA\"\n                      onChangeComplete={handleLogoBorderGradientAColorChange}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Typography>Gradient Color B of Border</Typography>\n                    <SketchPicker\n                      color={logoBorderGradientColorB}\n                      id=\"logoBorderGradientColorB\"\n                      onChangeComplete={handleLogoBorderGradientBColorChange}\n                    />\n                  </Grid>\n                </React.Fragment>\n              ) : (\n                <React.Fragment>\n                  <Grid item>\n                    <Typography>Color of Border</Typography>\n                    <SketchPicker\n                      color={borderColor}\n                      id=\"borderColor\"\n                      onChangeComplete={handleBorderColorChange}\n                    />\n                  </Grid>\n                </React.Fragment>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n}","import  { createMuiTheme } from '@material-ui/core';\n\nexport const theme = createMuiTheme({\n    palette: {\n      type: 'dark',\n    },\n});\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Gen from './Components/Gen';\nimport './assets/sass/index.sass';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport  { CssBaseline } from '@material-ui/core';\nimport { theme } from './Components/Theme';\n\nfunction App() {\n    return (\n      <ThemeProvider theme={theme}>\n          <CssBaseline />\n        <Gen />\n      </ThemeProvider>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}